filtered_data <- filtered_data %>% arrange(`Country Name`)
view(filtered_data)
# Assuming my_data is your dataset
transposed_data <- t(filtered_data)
view(transposed_data)
colnames(transposed_data) <- transposed_data[1, ]
view(transposed_data)
# Assuming my_data is your dataset
transposed_data <- t(filtered_data)
# Assign the first row as column headers
colnames(transposed_data) <- transposed_data[1, ]
# Remove the first row (now headers)
transposed_data <- transposed_data[-1, ]
# Convert to data frame
transposed_data <- as.data.frame(transposed_data, stringsAsFactors = FALSE)
# View the transposed data
transposed_data
# View the transposed data
view(transposed_data)
# Name the first column
colnames(transposed_data)[1] <- "year"
# View the transposed data
view(transposed_data)
# Name the first column
colnames(transposed_data)[0] <- "year"
# Assign the first row as column headers
colnames(transposed_data) <- transposed_data[1, ]
# Remove the first row (now headers)
transposed_data <- transposed_data[-1, ]
# Convert to data frame
transposed_data <- as.data.frame(transposed_data, stringsAsFactors = FALSE)
# View the transposed data
view(transposed_data)
view(filtered_data)
# Assuming my_data is your dataset
transposed_data <- t(filtered_data)
# Assign the first row as column headers
colnames(transposed_data) <- transposed_data[1, ]
# Remove the first row (now headers)
transposed_data <- transposed_data[-1, ]
# Convert to data frame
transposed_data <- as.data.frame(transposed_data, stringsAsFactors = FALSE)
# View the transposed data
view(transposed_data)
# View the transposed data
transposed_data
# View the transposed data
transposed_data
library(esquisse)
library(esquisse)
esquisse::esquisser(transposed_data)
esquisse::esquisser(filtered_data)
transposed_data$year <- rownames(transposed_data)
# View the transposed data
transposed_data
# View the transposed data
view(transposed_data)
# Transpose the dataset
transposed_data2 <- as.data.frame(t(filtered_data[,-1]), stringsAsFactors = FALSE)  # Exclude the first column for transposition
# Assign the first column values as row names
rownames(transposed_data2) <- my_data$Country
# Convert row names to "year" column
transposed_data2 <- tibble::rownames_to_column(transposed_data2, var = "year")
# View the transposed data
transposed_data2
# Assign the first column values as row names
rownames(transposed_data2) <- my_data['Country Name']
# Convert row names to "year" column
transposed_data2 <- tibble::rownames_to_column(transposed_data2, var = "year")
# View the transposed data
transposed_data2
esquisse::esquisser(transposed_data)
# Example plot for "Algeria"
ggplot(my_data, aes(x = year, y = Algeria)) +
geom_line(color = "blue") +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
# Example plot for "Algeria"
ggplot(my_data, aes(x = year, y = Algeria)) +
geom_line(color = "blue") +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
# Example plot for "Algeria"
ggplot(transposed_data, aes(x = year, y = Algeria)) +
geom_line(color = "blue") +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
# Example plot for "Algeria"
ggplot(transposed_data, aes(x = year, y = Burundi)) +
geom_line(color = "blue") +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
# Example plot for "Algeria"
ggplot(transposed_data, aes(x = year, y = Burundi)) +
geom_line(color = "blue") +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
# Example plot for "Algeria"
ggplot(transposed_data, aes(x = year, y = Algeria)) +
geom_line() +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
view(filtered_data)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "Year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Print the transposed data frame
view(transposed_data)
library(esquisse)
esquisse::esquisser(transposed_data)
ggplot(my_data, aes(x = year, y = Algeria)) +
geom_line() +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
ggplot(transposed_data, aes(x = year, y = Algeria)) +
geom_line() +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
ggplot(transposed_data, aes(x = year, y = Algeria)) +
geom_line() +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
ggplot(transposed_data, aes(x = Year, y = Algeria)) +
geom_line() +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
glimpse(transposed_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Print the transposed data frame
view(transposed_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Print the transposed data frame
view(transposed_data)
esquisse::esquisser(transposed_data)
glimpse(transposed_data)
# Append "-01-01" to each year to represent January 1st of that year
year_date <- as.Date(paste0(transposed_data$year, "-01-01"))
# Print the resulting Date vector
print(year_date)
# Append "-01-01" to each year to represent January 1st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-01-01"))
# Print the resulting Date vector
print(year_date)
glimpse(transposed_data)
ggplot(transposed_data, aes(x = date, y = Algeria)) +
geom_line() +
labs(x = "Year", y = "Data Value", title = "Data Trend for Algeria") +
theme_minimal()
# Append "-01-01" to each year to represent January 1st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
# Print the resulting Date vector
print(year_date)
glimpse(transposed_data)
# Append "-01-01" to each year to represent January 1st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-24-31"))
# Append "-01-01" to each year to represent January 1st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
# Print the resulting Date vector
print(year_date)
glimpse(transposed_data)
a
#load dataset
my_data <- read_excel("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls", sheet = 1, skip = 3)
wrangle_data <- function(my_data){
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
##cleaned_data <- transposed_data.copy()
return(transposed_data)
}
cleaned_data <- wrangle_data(my_data)
glimpse(cleaned_data)
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
##cleaned_data <- transposed_data.copy()
return(transposed_data)
}
cleaned_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
glimpse(cleaned_data)
## Load Library
if(!require(pacman)) install.package('pacman')
pacman::p_load(
tidyverse,
esquisse,
readxl,
skimr
)
#Create wrangle function
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
##cleaned_data <- transposed_data.copy()
return(transposed_data)
}
cleaned_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
glimpse(cleaned_data)
skim(cleaned_data)
skim(cleaned_data)
view(cleaned_data)
glimpse(cleaned_data %>% select(date, everything()))
#Create wrangle function
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
#Put the date column at the beginning and drop the year column
rearranged_data <- transposed_data %>%
select(-year) %>%
select(date, everything())
cleaned_data <- rearranged_data
return(cleaned_data)
}
cleaned_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
glimpse(cleaned_data %>% select(date, everything()))
view(cleaned_data)
esquisse::esquisser(transposed_data)
esquisse::esquisser(cleaned_data)
### Read Metadata
Metadata_Country <- read_excel("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls", sheet = 2)
Metadata_Indicator <- read_excel("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls", sheet = 3)
View(Metadata_Indicator)
View(Metadata_Country)
view(cleaned_data %>% select(date, Nigeria))
is.na(cleaned_data)
sum(is.na(cleaned_data))
skim(cleaned_data)
esquisse::esquisser(cleaned_data)
#Create wrangle function
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Append "-12-31" to each year to represent December 31st of that year
tibbled_data$date <- as.Date(paste0(tibbled_data$year, "-12-31"))
#Put the date column at the beginning and drop the year column
rearranged_data <- tibbled_data %>%
select(-year) %>%
select(date, everything())
# Transpose the data frame
trans_data <- rearranged_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
untrans_data <- rearranged_data
return(trans_data, untrans_data)
}
cleaned_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
#Create wrangle function
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
#Put the date column at the beginning and drop the year column
trans_data <- transposed_data %>%
select(-year) %>%
select(date, everything())
return(trans_data, filtered_data)
}
trans_data, untrans_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
trans_data,untrans_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
trans_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
#Create wrangle function
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
tibbled_data <- tibble(filtered_data)
# Transpose the data frame
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
#Put the date column at the beginning and drop the year column
trans_data <- transposed_data %>%
select(-year) %>%
select(date, everything())
return(c(trans_data, filtered_data))
}
my_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
filetered_data = my_data$filtered_data
view(filtered_data)
filtered_data = my_data$filtered_data
view(filtered_data)
filtered_data = my_data$trans_data
view(filtered_data)
filtered_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
view(filtered_data)
view(filtered_data)
#Create wrangle function
wrangle_data <- function(my_data){
#load data
my_data <- read_excel(my_data, sheet = 1, skip = 3)
# Select columns that are not "Indicator Name" and "Indicator Code"
my_data <- my_data %>%
select(-c(`Indicator Name`, `Indicator Code`, `Country Code`))
# Create a vector with the names of African countries
african_countries <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi",
"Cabo Verde", "Cameroon", "Central African Republic", "Chad", "Comoros",
"Congo, Dem. Rep.", "Congo, Rep.", "Djibouti",
"Egypt, Arab Rep.", "Equatorial Guinea", "Eritrea", "Eswatini", "Ethiopia", "Gabon",
"Gambia, The", "Ghana", "Guinea", "Guinea-Bissau", "Cote d'Ivoire", "Kenya",
"Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania",
"Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda",
"Sao Tome and Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia",
"South Africa", "South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
### Filtered african countries
filtered_data <- my_data %>% filter(`Country Name` %in% african_countries)
filtered_data <- filtered_data %>% arrange(`Country Name`)
#tibbled_data <- tibble(filtered_data
return(filtered_data)
}
transpose_data <- function(filtered_data){
# Transpose the data frame
tibbled_data <- tibble(filtered_data)
transposed_data <- tibbled_data %>%
pivot_longer(cols = -`Country Name`, names_to = "year", values_to = "Value") %>%
pivot_wider(names_from = `Country Name`, values_from = Value)
# Append "-12-31" to each year to represent December 31st of that year
transposed_data$date <- as.Date(paste0(transposed_data$year, "-12-31"))
#Put the date column at the beginning and drop the year column
trans_data <- transposed_data %>%
select(-year) %>%
select(date, everything())
return(trans_data)
}
filtered_data <- wrangle_data("API_SM.POP.NETM_DS2_en_excel_v2_424013.xls")
view(filtered_data)
trans_data <- transpose_data(filtered_data)
view(trans_data)
filtered_data$total <- filtered_data %>%
select(-c(`Country Name`)) %>%
rowSums()
view(filtered_data)
esquisse::esquisser(filtered_data)
esquisse::esquisser(trans_data)
